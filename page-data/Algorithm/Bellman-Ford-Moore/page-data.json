{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/Bellman-Ford-Moore/","result":{"data":{"site":{"siteMetadata":{"title":"Gomster","author":"Gomster","siteUrl":"https://gomster96.github.io","comment":{"disqusShortName":"","utterances":"gomster96/gomster96.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"4b4a5a83-7eeb-5244-9812-dd2f8f140ca3","excerpt":"벨만 포드 알고리즘이란? 벨만포드 알고리즘 이란 V개의 정점과 E개의 간선을 가진 그래프 G에서 특정 출발 정점(S)에서 부터 다른 를 구하는 알고리즘이다. V개의 정점과 E개의 간선을 가진 가중 그래프에서 어떤 정점 A에서 어떤 정점 B까지의 최단거리는 최대 V - 1 개의 간선을 사용한다. 최단거리를 구하기 위해 V - 1 번 E개의 모든 간선을 확인한다. 음의 가중치를 가지는 간선도 가능하다. 음의 사이클의 존재 여부를 확인할 수 있다. 존재 여부 확인할 하기 위해 한번 더 E…","html":"<!-- <p align=\"center\"><img src=\"1.png\" height=\"600px\" width=\"600px\"></p> -->\n<h1 id=\"벨만-포드-알고리즘이란\" style=\"position:relative;\"><a href=\"#%EB%B2%A8%EB%A7%8C-%ED%8F%AC%EB%93%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"벨만 포드 알고리즘이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>벨만 포드 알고리즘이란?</h1>\n<p>벨만포드 알고리즘 이란 V개의 정점과 E개의 간선을 가진 그래프 G에서 특정 출발 정점(S)에서 부터 다른 <code class=\"language-text\">모든 정점까지의 최단 경로</code>를 구하는 알고리즘이다.</p>\n<ul>\n<li>V개의 정점과 E개의 간선을 가진 가중 그래프에서 어떤 정점 A에서 어떤 정점 B까지의 최단거리는 최대 V - 1 개의 간선을 사용한다.</li>\n<li>최단거리를 구하기 위해 V - 1 번 E개의 모든 간선을 확인한다.</li>\n<li>음의 가중치를 가지는 간선도 가능하다.</li>\n<li>\n<p>음의 사이클의 존재 여부를 확인할 수 있다.</p>\n<ul>\n<li>존재 여부 확인할 하기 위해 한번 더 E개의 간선을 확인한다.</li>\n<li>V번쨰 모든 간선을 확인한 후 다시 간선을 확인할 때 거리 배열이 갱신되었다면 그래프는 음의 싸이클을 가지는 그래프이다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"벨만-포드-알고리즘-코드\" style=\"position:relative;\"><a href=\"#%EB%B2%A8%EB%A7%8C-%ED%8F%AC%EB%93%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%BD%94%EB%93%9C\" aria-label=\"벨만 포드 알고리즘 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>벨만 포드 알고리즘 코드</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dis<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>from <span class=\"token operator\">=</span> from<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dis <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 정점의 개수는 N이라고 하고, 간선의 개수를 M개 있다고 할 때</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> distance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edgeList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Edge</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">M</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> distance<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> edgeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Edge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"간선에 대한 정보 저장\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일단 start를 1번정점이라고 가정함</span>\n        distance<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 자기 자신으로 가는 길이이니까 0으로 초기화해준다.</span>\n\n        <span class=\"token comment\">// 사용할 수 있는 간선의 수를 N-1개까지 사용해보면서</span>\n        <span class=\"token comment\">// 할 수있는 최단거리를 구하는 것이다.</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// i는 간선을 사용하는 횟수이다. 즉 i가 1이면 간선을 한번만 사용해서 갈 수 있는 구간을 찾는다.</span>\n            <span class=\"token comment\">// i가 1... n이면 간선을 3번 사용해서 갈 수있는 값이</span>\n            <span class=\"token comment\">// 이전까지의 값(1,2 .... n-1번 사용)보다 작으면 최신화 시켜준다.</span>\n\n            <span class=\"token comment\">// start가 1이고 distance[1] = 0 이기 때문에 당연히 1부터 시작하는</span>\n            <span class=\"token comment\">// 다른 모든 정점으로의 최솟값으로 구해질 수밖에 없다.</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">M</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Edge</span> nowEdge <span class=\"token operator\">=</span> edgeList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>nowEdge<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>nowEdge<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> distance<span class=\"token punctuation\">[</span>nowEdge<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nowEdge<span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        distance<span class=\"token punctuation\">[</span>nowEdge<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distance<span class=\"token punctuation\">[</span>nowEdge<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nowEdge<span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">boolean</span> findNegativeCycle <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 각 간선을 확인하며 지금까지 구했던 값들보다(N-1개의 간선을 사용하는 방법)</span>\n        <span class=\"token comment\">// 더 작은 값이 발생한다면 음의 싸이클이 존재한다는 뜻이다.</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span><span class=\"token class-name\">M</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Edge</span> nowEdge <span class=\"token operator\">=</span> edgeList<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>nowEdge<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> INF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>nowEdge<span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> distance<span class=\"token punctuation\">[</span>nowEdge<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nowEdge<span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    findNegativeCycle <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 음의 싸이클이 발생하면 distance배열의 값들이 의미가 없어진다.</span>\n        <span class=\"token comment\">// 만약 findNegativeCycle이 false라면  distance배열에는 각 값들중 최단거리가 저장되어있다.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>벨만포드 알고리즘은 최단거리를 구하기위해 총 E개의 모든 간선을 V-1번 확인하므로 시간복잡도는 O(VE)이다. (이때 E는 간선의 개수, V는 정점의 개수)</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>","frontmatter":{"title":"벨만포드 알고리즘 (Bellman-Ford-Moore)","date":"January 27, 2022"}}},"pageContext":{"slug":"/Algorithm/Bellman-Ford-Moore/","previous":{"fields":{"slug":"/Algorithm/Dijkstra/"},"frontmatter":{"title":"다익스트라 알고리즘 (Dijkstra Algorithm)"}},"next":{"fields":{"slug":"/Algorithm/Floyd-Warshall/"},"frontmatter":{"title":"플로이드-워셜 알고리즘 (Floyd-Warshall)"}}}}}