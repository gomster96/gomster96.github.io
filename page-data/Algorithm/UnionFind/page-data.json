{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/UnionFind/","result":{"data":{"site":{"siteMetadata":{"title":"Gomster","author":"Gomster","siteUrl":"https://gomster96.github.io","comment":{"disqusShortName":"","utterances":"gomster96/gomster96.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"38ab221d-edd1-5fd0-97aa-8aaf04a617c5","excerpt":"Union-Find 흔히 Union-Find로 알고있는 서로소 집합은 교집합이 공집합인 집합 들의 정보를 확인(Find)하고 조작(Union)할 수 있는 자료구조이다. Union 연산 Union(a, b) 서로 다른 두 원소 a, b가 있을 때 각 원소가 속한 집합을 하나로 합치는 연산이다. 따라서 원소 a는 집합 A에 속하고, 원소 b는 집합 B에 속할 때 Union(a,b)를 진행하면 두 집합의 AUB가 된다. Find 연산 Find(a) 원소 a에 대한 Find 연산은 a…","html":"<!-- <p align=\"center\"><img src=\"1.png\" height=\"600px\" width=\"600px\"></p> -->\n<h1 id=\"union-find\" style=\"position:relative;\"><a href=\"#union-find\" aria-label=\"union find permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union-Find</h1>\n<p>흔히 Union-Find로 알고있는 서로소 집합은 교집합이 공집합인 집합 들의 정보를 확인(Find)하고 조작(Union)할 수 있는 자료구조이다.</p>\n<h3 id=\"union-연산-uniona-b\" style=\"position:relative;\"><a href=\"#union-%EC%97%B0%EC%82%B0-uniona-b\" aria-label=\"union 연산 uniona b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union 연산 Union(a, b)</h3>\n<ul>\n<li>서로 다른 두 원소 a, b가 있을 때 각 원소가 속한 집합을 하나로 합치는 연산이다.</li>\n<li>따라서 원소 a는 집합 A에 속하고, 원소 b는 집합 B에 속할 때 Union(a,b)를 진행하면 두 집합의 AUB가 된다.</li>\n</ul>\n<h3 id=\"find-연산-finda\" style=\"position:relative;\"><a href=\"#find-%EC%97%B0%EC%82%B0-finda\" aria-label=\"find 연산 finda permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Find 연산 Find(a)</h3>\n<ul>\n<li>원소 a에 대한 Find 연산은 a가 속한 집합의 대표번호를 반환하는 것이다.</li>\n<li>속도 증가를 위해 경로 압축을 해줄 수 있다.</li>\n</ul>\n<p>관련 코드는 아래 예제에서 보이도록 하겠다.</p>\n<h3 id=\"find-함수\" style=\"position:relative;\"><a href=\"#find-%ED%95%A8%EC%88%98\" aria-label=\"find 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Find 함수</h3>\n<ul>\n<li>arr이라는 배열이 있을때 (arr배열에는 대표값이 들어있다.), 대표번호를 재귀적으로 찾아서 반환해주는 함수이다.</li>\n<li>\n<p>이떄 return부분에 <code class=\"language-text\">arr[n] = find(arr[n])</code> 을 해주었는데 이는 경로 압축이다.</p>\n<ul>\n<li>find를 호출했을 경우 맨 처음의 n부터 대표 값 까지의 경로들의 arr[] 의 값들은 다 대표값이 된다.</li>\n<li>다시 같은 또는 이전에 호출했던 경로상의 값을 find했을 경우 바로 대표값을 return해줄 수 있게 된다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"union-함수\" style=\"position:relative;\"><a href=\"#union-%ED%95%A8%EC%88%98\" aria-label=\"union 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Union 함수</h3>\n<p>Union함수는 결국 find를 통해서 대표값을 찾아주는 것을 이용하여, 대표값을 같게 만들어줌으로써 합집합을 구현하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>이렇게 해줄시에 결국 a의 대표값의 b의 대표값으로 바뀌고, 이제 a가 대표값이었던 다른 요소들은 해당 요소들이 호출 될때마다 이전 대표값(union되기 이전의 대표값)에서 최신 대표값(union된 이후의 대표값)으로 바뀌게 된다.</li>\n</ul>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>","frontmatter":{"title":"서로소 집합 (Disjoint Set, Union-Find)","date":"January 24, 2022"}}},"pageContext":{"slug":"/Algorithm/UnionFind/","previous":{"fields":{"slug":"/Spring/CRUD/"},"frontmatter":{"title":"Spring 게시판 CRUD 예제"}},"next":{"fields":{"slug":"/Algorithm/Kruskal/"},"frontmatter":{"title":"크루스칼 알고리즘 (Kruskal Algorithm)"}}}}}