{"componentChunkName":"component---src-templates-blog-post-js","path":"/JPA/6_값타입/","result":{"data":{"site":{"siteMetadata":{"title":"Gomster","author":"Gomster","siteUrl":"https://gomster96.github.io","comment":{"disqusShortName":"","utterances":"gomster96/gomster96.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"abfc28fa-7d78-51d9-81dc-ae93b7d2a17d","excerpt":"JPA의 데이터 타입 엔티티 타입 @Entity로 정의하는 객체 데이터가 변해도 식별자(ex: ID) 같은 것으로 지속해서 추적 가능 ex) 회원 엔티티의 키나 나이 값을 변경해도 식별자로 어떤 데이터인지 인식 가능 값 타입 int, Integer, String처럼 단순히 값으로 사용하는 자바 기본 타입이나 객체 식별자가 없고 값만 있으므로 변경시 추적 불가 ex) 숫자 100을 200으로 변경하면 완전히 다른 값으로 대체 기본값 타입 자바 기본 타입(int, double…","html":"<h1 id=\"jpa의-데이터-타입\" style=\"position:relative;\"><a href=\"#jpa%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85\" aria-label=\"jpa의 데이터 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA의 데이터 타입</h1>\n<h2 id=\"엔티티-타입\" style=\"position:relative;\"><a href=\"#%EC%97%94%ED%8B%B0%ED%8B%B0-%ED%83%80%EC%9E%85\" aria-label=\"엔티티 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엔티티 타입</h2>\n<ul>\n<li>@Entity로 정의하는 객체</li>\n<li>\n<p>데이터가 변해도 식별자(ex: ID) 같은 것으로 지속해서 추적 가능</p>\n<ul>\n<li>ex) 회원 엔티티의 키나 나이 값을 변경해도 식별자로 어떤 데이터인지 인식 가능</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"값-타입\" style=\"position:relative;\"><a href=\"#%EA%B0%92-%ED%83%80%EC%9E%85\" aria-label=\"값 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값 타입</h2>\n<ul>\n<li>int, Integer, String처럼 단순히 값으로 사용하는 자바 기본 타입이나 객체</li>\n<li>\n<p>식별자가 없고 값만 있으므로 변경시 추적 불가</p>\n<ul>\n<li>ex) 숫자 100을 200으로 변경하면 완전히 다른 값으로 대체</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"기본값-타입\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92-%ED%83%80%EC%9E%85\" aria-label=\"기본값 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본값 타입</h3>\n<ul>\n<li>자바 기본 타입(int, double 등)</li>\n<li>래퍼 클래스(Integer, Long 등)</li>\n<li>\n<p>생명 주기를 엔티티의 의존</p>\n<ul>\n<li>엔티티가 삭제되면 기본값 타입의 필드도 알아서 삭제 됨</li>\n</ul>\n</li>\n<li>\n<p>값 타입은 공유하면 안됌</p>\n<ul>\n<li>ex) 회원이라는 테이블이 있을 때 회원의 이름을 변경시 다른 회원의 이름도 함께 변경되는 이런 일이 발생하면 안됌</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"임베디드-타입\" style=\"position:relative;\"><a href=\"#%EC%9E%84%EB%B2%A0%EB%94%94%EB%93%9C-%ED%83%80%EC%9E%85\" aria-label=\"임베디드 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>임베디드 타입</h3>\n<ul>\n<li>새로운 값 타입을 <code class=\"language-text\">직접 정의</code>하는 것</li>\n<li>JPA는 임베디드 타입(embedded type) 이라고 하지만, 주로 기본 값 타입을 모아 만들기에 복합 값 타입 이라고도 함</li>\n<li>임베디드 타입은 int, String 처럼 값 타입이다.</li>\n</ul>\n<p>예시 - 어떤 레코드의 생성, 수정, 내용을 값 타입으로 저장하고 싶으면?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Embeddable</span> <span class=\"token comment\">// 값 타입을 정의하는 곳에 표시한다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createdAt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> revisedAt<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 기본생성자는 필수로 필요하다.</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createdAt <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>revisedAt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalDateTime</span> <span class=\"token function\">getExistTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// createdAt과 현재시간을 이용해서 계산하여 리턴</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>@Embeddable은 값 타입을 정의하는 곳에서 표시한다.</li>\n<li>@Embedded는 값 타입을 사용하는 곳에 표시한다.</li>\n<li>임베디드 타입은 재사용에 용의하다.</li>\n<li>기본생성자는 반드시 필요하다.</li>\n<li>getExistTime 처럼 해당 값 타입에서만 사용하는 의미있는 메소드를 만들 수 있다.</li>\n<li>임베디드 타입을 포함한 모든 값타입의 생명주기는, 일반 값 타입처럼 해당 값을 소유한 엔티티에 생명주기에 의존한다.</li>\n</ul>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/ORM-JPA-Basic\">김영한, 자바 ORM 표준 JPA 프로그래밍 - 기본편</a></li>\n</ul>","frontmatter":{"title":"값 타입","date":"March 03, 2022"}}},"pageContext":{"slug":"/JPA/6_값타입/","previous":{"fields":{"slug":"/Algorithm/KMP/"},"frontmatter":{"title":"KMP 알고리즘 (문자열 탐색)"}},"next":{"fields":{"slug":"/JPA/7_\bJQPL_ToBe/"},"frontmatter":{"title":"영속성 컨텍스트"}}}}}