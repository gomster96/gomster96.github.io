{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/IoC, DI And SOLID/","result":{"data":{"site":{"siteMetadata":{"title":"Gomster","author":"Gomster","siteUrl":"https://gomster96.github.io","comment":{"disqusShortName":"","utterances":"gomster96/gomster96.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8339abcf-f1ef-5dab-8a0f-7392cc83fe4f","excerpt":"이전에 IoC와 DI 그리고 DL에 대해 간단하게 정리해본 적이 있다. 하지만 이번 시간에는 예제와 함께 어떤 이유에서 IoC, DI가 등장하였고, 스프링 컨테이너는 어떻게 이를 도와주는지를 알아보겠다. SOLID를 위반하는 코드 만약에 위에 예시처럼 MemberService라는 interface를 구현한 MemberServiceImpl 이라는 것이 있을 때 우리는 memberRepository를 사용하기 위해 다음과 같이 사용한다. 하지만 이렇게 될 경우 문제가 발생한다. OCP (Open…","html":"<p>이전에 IoC와 DI 그리고 DL에 대해 간단하게 정리해본 적이 있다. 하지만 이번 시간에는 예제와 함께 어떤 이유에서 IoC, DI가 등장하였고, 스프링 컨테이너는 어떻게 이를 도와주는지를 알아보겠다.</p>\n<h1 id=\"solid를-위반하는-코드\" style=\"position:relative;\"><a href=\"#solid%EB%A5%BC-%EC%9C%84%EB%B0%98%ED%95%98%EB%8A%94-%EC%BD%94%EB%93%9C\" aria-label=\"solid를 위반하는 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SOLID를 위반하는 코드</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MemberService</span><span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryMemberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span> <span class=\"token function\">findMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약에 위에 예시처럼 MemberService라는 interface를 구현한 MemberServiceImpl 이라는 것이 있을 때 우리는 memberRepository를 사용하기 위해 다음과 같이 사용한다. 하지만 이렇게 될 경우 문제가 발생한다.</p>\n<ul>\n<li>\n<p>OCP (Open/Closed Principle) 개방 폐쇄 원칙의 위반</p>\n<ul>\n<li>만약에 MemoryMemberRepository를 DataBaseMemberRepository로 바꾸고 싶을 때, 위에코드에서 우리는 해당 부분을 다음과 같이 고칠 수 밖에 없다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryMemberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DatabaseMemberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>따라서 이는 Client 코드의 변경이므로 결국 OCP의 위반이다.</p>\n<ul>\n<li>\n<p>DIP (Dependency Inversion Principle) 의존관계 역전 원칙의 위반</p>\n<ul>\n<li>프로그래머는 <code class=\"language-text\">추상화에 의존</code> 해야하지, <code class=\"language-text\">구현체에 의존</code>하면 안된다.</li>\n<li>하지만 위에 예시는 결국 MemberMemberRepository라는 구현체에 의존을 하게 되므로 DIP에 의존하게 된다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"solid를-위반하지-않는-이상적인-코드\" style=\"position:relative;\"><a href=\"#solid%EB%A5%BC-%EC%9C%84%EB%B0%98%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%83%81%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C\" aria-label=\"solid를 위반하지 않는 이상적인 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SOLID를 위반하지 않는 이상적인 코드</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MemberService</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 생성자에 의해 주입을 받음</span>\n    <span class=\"token comment\">// 따라서 memberRepository 라는 interface 만 가지고 있음 -> 추상화에만 의존</span>\n    <span class=\"token comment\">// DIP 를 지키게 됨</span>\n    <span class=\"token comment\">// 생성자 주입이라고 함</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberRepository <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span> <span class=\"token function\">findMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> memberId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이상적인 코드라면 위에 예시처럼 MemberServiceImpl에서는 오직 추상화인 MemberRepository만 알고 있어야 하고, 이에 구현체에 관한 것은 어딘가에서 주입 받아야 한다.</p>\n<p>-> 위에 예시처럼 되어 있는 것을 생성자 주입이라고 한다.</p>\n<p>-> 이러한 방법으로 DIP, OCP를 위반하지 않을 수 있다.</p>\n<h1 id=\"config-파일의-필요성\" style=\"position:relative;\"><a href=\"#config-%ED%8C%8C%EC%9D%BC%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"config 파일의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config 파일의 필요성</h1>\n<p>하지만 위에 예시처럼 하려면, 어딘가에서는 구현체를 만들어주어야 한다. 따라서 애플리케이션의 전체 동작 방식을 구성(config)하기 위해, <code class=\"language-text\">구현 객체를 생성하고, 연결하는 책임</code>을 가지는 별도의 설정 클래스를 만들 것이다.</p>\n<ul>\n<li>이렇게 별도로 책임을 지는 설정클래스를 만듬으로써, MemberServiceImpl과 같은 클래스는 본인의 역할에만 충실하고, 이후 들어올 repository에 관한 구현체에는 상관하지 않은 채로, 구현체의 기능만 사용하면 된다.</li>\n</ul>\n<h2 id=\"appconfig\" style=\"position:relative;\"><a href=\"#appconfig\" aria-label=\"appconfig permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AppConfig</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberService</span> <span class=\"token function\">memberService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token function\">memberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MemberRepository</span> <span class=\"token function\">memberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryMemberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderService</span> <span class=\"token function\">orderService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token function\">memberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">discountPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiscountPolicy</span> <span class=\"token function\">discountPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//        return new FixDiscountPolicy();</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RateDiscountPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같은 방법을 사용하여, AppConfig 파일을 만든다면, 다른 파일에서는 단순히 아래와 같이 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token class-name\">MemberService</span> memberService <span class=\"token operator\">=</span> <span class=\"token class-name\">AppConfig</span><span class=\"token punctuation\">.</span><span class=\"token function\">memberService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>즉 구현체에 대한 것은 AppConfig 만 알면 되는것이고, 만약 구현체를 바꾸고 싶다면, 각 역할을 맡은 코드를 바꾸는 것이 아닌 AppConfig에 있는 구현체만 바꾸어주면 되는 방법이다.</p>\n<p>이러한 방법은 <code class=\"language-text\">생성자를 통해서 인스턴스가 주입</code>되므로 생성자 주입이라고 한다.</p>\n<ul>\n<li>따라서 이제부터는 MemberServiceImpl은 어떤 구현 객체(MemberRepository)가 들어올 지 모르게 된다. 의존관계에 대한 고민은 외부에 맡기고 행에만 집중하게 된다.</li>\n</ul>\n<h3 id=\"didipendency-injection-의존성-주입\" style=\"position:relative;\"><a href=\"#didipendency-injection-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85\" aria-label=\"didipendency injection 의존성 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DI(Dipendency Injection) 의존성 주입</h3>\n<p>이처럼 클라이언트인 memberServiceImpl의 입장에서는 의존관계를 마치 외부에서 주입해주는 것과 같다고 해서 이러한 것을 DI(Dipendency Injection) 의존성 주입이라고 한다.</p>\n<h1 id=\"appconfig-파일을-스프링컨테이너를-통해서-관리\" style=\"position:relative;\"><a href=\"#appconfig-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%8A%A4%ED%94%84%EB%A7%81%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A5%BC-%ED%86%B5%ED%95%B4%EC%84%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"appconfig 파일을 스프링컨테이너를 통해서 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AppConfig 파일을 스프링컨테이너를 통해서 관리</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberService</span> <span class=\"token function\">memberService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token function\">memberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberRepository</span> <span class=\"token function\">memberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryMemberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderService</span> <span class=\"token function\">orderService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token function\">memberRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">discountPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiscountPolicy</span> <span class=\"token function\">discountPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RateDiscountPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전의 Config파일을 스프링 컨테이너에서 관리하는 방법이다.</p>\n<p>크게 다른 건 없고, @Configuration이라는 어노테이션을 붙여준 뒤, 우리가 보내줄 구현체를 반환하는 메소드에는 @Bean 어노테이션을 붙여주면 된다.</p>\n<p>또한 다른 클래스에서 해당 빈 즉 구현체를 사용하고 싶으면 다음과 같이 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MemberService</span> memberService <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memberService\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MemberService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">OrderService</span> orderService <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderService\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ApplicationContext는 모든 빈들을 가지고 있는 Config 파일이라고 생각하면 되고, ApplicationContext의 getBean 메서드를 통해서 필요한 memberService, orderService 들을 받아올 수 있다.</p>\n<h1 id=\"ioc-di-컨테이너\" style=\"position:relative;\"><a href=\"#ioc-di-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-label=\"ioc di 컨테이너 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IoC, DI, 컨테이너</h1>\n<p>여기서는 위에서 아주 중요하게 다루었던 개념인 IoC, DI 그리고 컨테이너에 대해 다시 한번 정리할 것이다.</p>\n<h2 id=\"제어의-역전-ioc-inversion-of-control\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84-ioc-inversion-of-control\" aria-label=\"제어의 역전 ioc inversion of control permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제어의 역전 IoC (Inversion of Control)</h2>\n<p>지금까지의 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고 실행했다. 구현객체가 프로그램의 제어 흐름을 스스로 조종했다.</p>\n<p>하지만 AppConfig 가 등장한 이후부터, 구현객체는 자신의 로직을 실행하는 역할만 담당하고, 프로그램에 대한 제어 흐름에 대한 권한은 모두 AppConfig가 가지고 있다.</p>\n<blockquote>\n<p>이렇게 프로그램의제어 흐름을 직접 제어하는 것이 아닌 외부에서 관리하는 것을 제어의 역전 (IoC) 라고 한다.</p>\n</blockquote>\n<h2 id=\"의존관계-주입-di\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%A3%BC%EC%9E%85-di\" aria-label=\"의존관계 주입 di permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존관계 주입 DI</h2>\n<p>의존 관계 주입을 사용하면 클라이언트의 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다. (외부에서 주입하는 방식으로, 클라이언트는 추상화만 가지고 있음)</p>\n<blockquote>\n<p>의존관계 주입을 사용하면 정적인 클래스 의존관계를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.</p>\n</blockquote>\n<h2 id=\"ioc-컨테이너-di-컨테이너\" style=\"position:relative;\"><a href=\"#ioc-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-di-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-label=\"ioc 컨테이너 di 컨테이너 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IoC 컨테이너, DI 컨테이너</h2>\n<p>AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는 것을 IoC컨테이너 또는 DI컨테이너라고한다.</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h1>\n<ul>\n<li>김영한, Spring 기본편</li>\n</ul>","frontmatter":{"title":"SOLID를 적용하기 위한 해결책 IoC 그리고 DI","date":"August 28, 2022"}}},"pageContext":{"slug":"/Spring/IoC, DI And SOLID/","previous":{"fields":{"slug":"/Spring/다형성과SOLID5원칙/"},"frontmatter":{"title":"다형성과 SOLID 5원칙"}},"next":null}}}