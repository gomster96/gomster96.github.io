{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/WebClient/","result":{"data":{"site":{"siteMetadata":{"title":"Gomster","author":"Gomster","siteUrl":"https://gomster96.github.io","comment":{"disqusShortName":"","utterances":"gomster96/gomster96.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"72846679-45de-581c-97cb-34410f55674b","excerpt":"WebClient란? WebClient는 Spring에서 제공하는 RestClient의 한 종류이다. RestTemplate는 점진적으로 Deprecated 될 예정이기 때문에 이제는 WebClient를 사용하는 것이 좋다. RestTemplate와 WebClient RestTemplate란? RestTemplate은 스프링에서 제공하는 템플릿이다. 스프링 3.0에서부터 지원하는 RestTemplate은 HTTP 통신에 유용하게 쓸 수 있다. REST 서비스를 호출하도록 설계되어 HTTP…","html":"<!-- <p align=\"center\"><img src=\"1.png\" height=\"250px\" width=\"600px\"></p> -->\n<h1 id=\"webclient란\" style=\"position:relative;\"><a href=\"#webclient%EB%9E%80\" aria-label=\"webclient란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebClient란?</h1>\n<p>WebClient는 Spring에서 제공하는 RestClient의 한 종류이다. RestTemplate는 점진적으로 Deprecated 될 예정이기 때문에 이제는 WebClient를 사용하는 것이 좋다.</p>\n<h2 id=\"resttemplate와-webclient\" style=\"position:relative;\"><a href=\"#resttemplate%EC%99%80-webclient\" aria-label=\"resttemplate와 webclient permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RestTemplate와 WebClient</h2>\n<h3 id=\"resttemplate란\" style=\"position:relative;\"><a href=\"#resttemplate%EB%9E%80\" aria-label=\"resttemplate란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RestTemplate란?</h3>\n<p>RestTemplate은 스프링에서 제공하는 템플릿이다. 스프링 3.0에서부터 지원하는 RestTemplate은 HTTP 통신에 유용하게 쓸 수 있다. REST 서비스를 호출하도록 설계되어 HTTP 프로토콜의 메서드 (GET, POST, DELETE, PUT)에 맞게 여러 메서드를 제공한다. RestTemplate은 다음과 같은 특징이 있다</p>\n<ul>\n<li>통신을 단순화하고 RESTful 원칙을 지킨다</li>\n<li>멀티쓰레드 방식을 사용</li>\n<li>Blocking 방식을 사용</li>\n</ul>\n<h3 id=\"webclient란-1\" style=\"position:relative;\"><a href=\"#webclient%EB%9E%80-1\" aria-label=\"webclient란 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebClient란?</h3>\n<p>WebCleint는 스프링 5에서 추가된 인터페이스다. 스프링 5 이전에는 비동기 클라이언트로 AsyncRestTemplate을 사용했었다. 하지만 스프링 5 이후 부터는 WebClient를 사용하는 것을 권장한다. WebClient는 다음과 같은 특징이 있다.</p>\n<ul>\n<li>싱글 스레드 방식을 사용</li>\n<li>Non-Blocking 방식을 사용</li>\n<li>JSON, XML을 쉽게 응답받는다.</li>\n</ul>\n<h2 id=\"webclinet-생성법\" style=\"position:relative;\"><a href=\"#webclinet-%EC%83%9D%EC%84%B1%EB%B2%95\" aria-label=\"webclinet 생성법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebClinet 생성법</h2>\n<ol>\n<li>WebClient.create();</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">WebClient</span> webClient <span class=\"token operator\">=</span> <span class=\"token class-name\">WebClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>Builder를 활용한 생성</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">WebClient</span> webClient <span class=\"token operator\">=</span> <span class=\"token class-name\">WebClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">baseUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080\"</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">defaultCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"쿠키\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"쿠키값\"</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">defaultHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>CONTENT_TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n\t                            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"webclient로-reqeust-보내기\" style=\"position:relative;\"><a href=\"#webclient%EB%A1%9C-reqeust-%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"webclient로 reqeust 보내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebClient로 Reqeust 보내기</h2>\n<h3 id=\"webclientcreatewebclient를-생성-했을-경우\" style=\"position:relative;\"><a href=\"#webclientcreatewebclient%EB%A5%BC-%EC%83%9D%EC%84%B1-%ED%96%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"webclientcreatewebclient를 생성 했을 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>webClient.create()webClient를 생성 했을 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">webClient<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"요청 보낼 URI입력\"</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>header <span class=\"token operator\">-></span><span class=\"token punctuation\">{</span>\n            header<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ContenstType</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n            header<span class=\"token punctuation\">.</span><span class=\"token function\">setAcceptCharset</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharsetType</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 필요시 header 밑 관련 조건 추가 가능</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">webClient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"요청 보낼 URI입력\"</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>header <span class=\"token operator\">-></span><span class=\"token punctuation\">{</span>\n            header<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ContenstType</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n            header<span class=\"token punctuation\">.</span><span class=\"token function\">setAcceptCharset</span><span class=\"token punctuation\">(</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharsetType</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 필요시 header 밑 관련 조건 추가 가능</span>\n         <span class=\"token punctuation\">.</span><span class=\"token function\">bodyValue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>formdata가 <span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span>type으로 들어감<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"builder로-webclient를-생성했을-경우\" style=\"position:relative;\"><a href=\"#builder%EB%A1%9C-webclient%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%96%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"builder로 webclient를 생성했을 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Builder로 webClient를 생성했을 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">WebClient<span class=\"token punctuation\">.</span>RequestHeaderUriSpec</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> baseSpec <span class=\"token operator\">=</span> <span class=\"token class-name\">WebClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                                      <span class=\"token punctuation\">.</span><span class=\"token function\">baseUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080\"</span><span class=\"token punctuation\">)</span>\n\t                                                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                                                      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 이후 baseSpec에 원하는 파라미터를 추가로 붙여서 요청한다.</span>\nbaseSpec<span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">-></span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n                               <span class=\"token punctuation\">.</span><span class=\"token function\">queryParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이름\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"값\"</span><span class=\"token punctuation\">)</span>\n                               <span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//Response를 받아옴.</span></code></pre></div>\n<h2 id=\"webclient로-response받아오기\" style=\"position:relative;\"><a href=\"#webclient%EB%A1%9C-response%EB%B0%9B%EC%95%84%EC%98%A4%EA%B8%B0\" aria-label=\"webclient로 response받아오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebClient로 response받아오기</h2>\n<ul>\n<li>exchange()\nClientResponse를 상태값, 그리고 헤더와 함께 가져온다.</li>\n<li>retrieve()\nbody를 바로 가져온다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> response <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">exchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bodyToMono</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> response <span class=\"token operator\">=</span> req2<span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bodyToMono</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>block을 사용하면 RestTemplate처럼 동기식으로 사용할 수 있다. block이후의 반환 값은 String으로 받을 수도 있지만, <code class=\"language-text\">Map&lt;String, Object></code>꼴로 더 편하게 받을 수 있다.</p>\n<p>bodyToMono는 가져온 body를 Reactor의 Mono객체로 바꿔준다.</p>\n<ul>\n<li>Mono객체는 0~1개의 결과를 처리하는 객체이다.</li>\n<li>Flux는 0~N개의 결과를 처리하는 객체이다.</li>\n</ul>\n<p><a href=\"https://pearlluck.tistory.com/730\">Mono, Flux, 그리고 WebFlux에 대한 설명</a></p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://pearlluck.tistory.com/730\">https://pearlluck.tistory.com/730</a> : WebFlux에 대해 익히기</li>\n<li><a href=\"https://www.notion.so/RestTemplate-WebClient-1f7c27dcb3ff4f4b8bc4e160c3666a61\">https://www.notion.so/RestTemplate-WebClient-1f7c27dcb3ff4f4b8bc4e160c3666a61</a></li>\n<li><a href=\"https://weirdstuffs.tistory.com/3\">https://weirdstuffs.tistory.com/3</a></li>\n</ul>","frontmatter":{"title":"WebClient","date":"September 11, 2022"}}},"pageContext":{"slug":"/Spring/WebClient/","previous":{"fields":{"slug":"/Spring/BeanLifecycleAndScope/"},"frontmatter":{"title":"스프링 빈 생명주기, 콜백, 스코프"}},"next":{"fields":{"slug":"/Spring/ArgumentResolver/"},"frontmatter":{"title":"Argument Resolver"}}}}}