{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/SpringControllerReturnType/","result":{"data":{"site":{"siteMetadata":{"title":"Gomster","author":"Gomster","siteUrl":"https://gomster96.github.io","comment":{"disqusShortName":"","utterances":"gomster96/gomster96.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d5f24d07-97aa-5313-a37c-ec027c1b49ac","excerpt":"Spring Controller 리턴 타입 Spring에서 지원해주는 Controller에는 다양한 리턴 타입을 지원하며 각각의 역할이 다르다. 이번 포스팅에서는 스프링에서 지원하는 리턴타입을 알아보도로 하겠다. String Spring + View Template를 사용할 때 흔히 사용하는 타입이다. String에 View네임을 지정하면 지정한 뷰로 데이터가 전송되게 된다. 이때 Model 안에 데이터를 key와 value값으로 담고, 이에 따른 return 타입을 String…","html":"<h1 id=\"spring-controller-리턴-타입\" style=\"position:relative;\"><a href=\"#spring-controller-%EB%A6%AC%ED%84%B4-%ED%83%80%EC%9E%85\" aria-label=\"spring controller 리턴 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Controller 리턴 타입</h1>\n<p>Spring에서 지원해주는 Controller에는 다양한 리턴 타입을 지원하며 각각의 역할이 다르다. 이번 포스팅에서는 스프링에서 지원하는 리턴타입을 알아보도로 하겠다.</p>\n<h2 id=\"string\" style=\"position:relative;\"><a href=\"#string\" aria-label=\"string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String</h2>\n<p>Spring + View Template를 사용할 때 흔히 사용하는 타입이다. String에 View네임을 지정하면 지정한 뷰로 데이터가 전송되게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"/test/data\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때 Model 안에 데이터를 key와 value값으로 담고, 이에 따른 return 타입을 String 값으로 뷰의 이름을 지정해주면 지정한 뷰로 이동하고, 이를 사용하는 템플릿의 문법에 맞게 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsp\"><pre class=\"language-jsp\"><code class=\"language-jsp\">...\n    &lt;body&gt;\n        &lt;p&gt;${data.name} =&gt; &lt;/p&gt;\n        &lt;p${data.age} =&gt;&lt;/p&gt;\n    &lt;/body&gt;\n...</code></pre></div>\n<p>해당 예제는 JSP에서 값을 받을 떄 사용하는 방법이다. 이렇게 받고 사용하면 된다.</p>\n<h2 id=\"modelandview\" style=\"position:relative;\"><a href=\"#modelandview\" aria-label=\"modelandview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ModelAndView</h2>\n<p>요즘은 잘 사용하진 않지만 View와 Object를 한번에 설정해주는 방법이다. new ModelAndView(“페이지경로”) 로 뷰를 정하고, addObject()메서드로 데이터를 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ModelAndView</span> mav <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test/viewPage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hihihi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> mav\n    <span class=\"token comment\">// 또는 아래처럼 체이닝으로 한번에 처리해줄 수도 있다.</span>\n    <span class=\"token comment\">//return new ModelAndView(\"test/viewPage\").addObject(\"data\", \"hihihi\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"redirect\" style=\"position:relative;\"><a href=\"#redirect\" aria-label=\"redirect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redirect</h2>\n<p>돌아가려는 view의 <code class=\"language-text\">redirect:</code> 접두어를 붙이게 되는경우 지정한 페이지로 리다이렉트가 되게 된다. 상대경로, 절대경로 두가지 방식이 있다.</p>\n<ul>\n<li>redirect:/api/test -> 현재 서블릿 컨텍스트에 대한 상대적인 경로로 리다이렉트를 하게 된다.</li>\n<li>redirect:http//:localhost:8080/api/test -> 전체경로를 적는경우 절대 경로로 이동한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ModelAndView</span> mav <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mav<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redirect:/api/test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> mav<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"void\" style=\"position:relative;\"><a href=\"#void\" aria-label=\"void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>void</h2>\n<p>Spring에서는 신기하게도? void 타입도 리턴이 가능하다. Spring은 뷰명을 입력하지 않아도 기본적으로 해당 url을 이용해서 뷰네임을 결정한다. 스프링 설정 파일에 실제 인터페이스는 RequestToViewNameTranslator 인데, 이 인터페이스의 빈이 존재하지 않을 경우, 기본적으로 DefaultRequestToViewNameTranslator구현체를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/void\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    model<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 할시에 요청 url의 제일앞 /와 확장자를 제외한 나머지 부분을 뷰네임으로 지정한다. 즉 여기서는 test/address가 뷰네임으로 지정된다.</p>\n<h2 id=\"model-object\" style=\"position:relative;\"><a href=\"#model-object\" aria-label=\"model object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model Object</h2>\n<p>여기서 Model은 Spring에서 제공하는 Model클래스가 아니라 우리가 자주 Model로서 사용하는 오브젝트 클래스를 이야기하는 것이다. 즉 Spring에서는 Model 그 자체를 리턴해도 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Hello</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gomster\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gomster96@gmail.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마찬가지로 void처럼 뷰네임을 설정할수 없기 때문에 RequestToViewNameTranslator 로 뷰네임을 지정해야한다.</p>\n<h2 id=\"responsebody\" style=\"position:relative;\"><a href=\"#responsebody\" aria-label=\"responsebody permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@ResponseBody</h2>\n<p>전통적인 스프링에서는 @Controller를 View를 반환하기 위해 사용했었지만, 요즘처럼 SPA로 개발을 하거나 Ajax로 개발을 할때 유용한 어노테이션이다. JSON형태로 데이터를 반환해 줄 수 있게 한다. REST SERVER로서의 역할을 할 떄 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/account\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@ResponseBody</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h1>\n<ul>\n<li><a href=\"https://ooeunz.tistory.com/101\">https://ooeunz.tistory.com/101</a></li>\n</ul>","frontmatter":{"title":"Spring Controller의 return 타입","date":"January 19, 2022"}}},"pageContext":{"slug":"/Spring/SpringControllerReturnType/","previous":{"fields":{"slug":"/Spring/IOC,DI,DL/"},"frontmatter":{"title":"IoC, DI, DL"}},"next":{"fields":{"slug":"/Spring/CRUD/"},"frontmatter":{"title":"Spring 게시판 CRUD 예제"}}}}}