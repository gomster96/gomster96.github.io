{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/SpringAndSingleton/","result":{"data":{"site":{"siteMetadata":{"title":"Gomster","author":"Gomster","siteUrl":"https://gomster96.github.io","comment":{"disqusShortName":"","utterances":"gomster96/gomster96.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9901c228-b269-5fd6-8027-3a7557bc51e8","excerpt":"싱글톤이란? 싱글톤이란 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다. 만약에 클라이언트의 호출이 있을 때 마다 새로운 인스턴스를 생성한다면, 이를 서버의 메모리가 버티기에는 너무나도 부담이 된다. 따라서 이러한 경우에는 인스턴스가 1개만 생성되는 싱글톤 패턴을 사용한다. 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야한다. 따라서 private 생성자를 통해 외부에서 임의로 new 키워드를 사용하지 못하도록 막는다. static 영역에 객체 instance…","html":"<h1 id=\"싱글톤이란\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4%EC%9D%B4%EB%9E%80\" aria-label=\"싱글톤이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤이란?</h1>\n<p>싱글톤이란 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다. 만약에 클라이언트의 호출이 있을 때 마다 새로운 인스턴스를 생성한다면, 이를 서버의 메모리가 버티기에는 너무나도 부담이 된다. 따라서 이러한 경우에는 인스턴스가 1개만 생성되는 싱글톤 패턴을 사용한다.</p>\n<ul>\n<li>객체 인스턴스를 2개 이상 생성하지 못하도록 막아야한다. 따라서 private 생성자를 통해 외부에서 임의로 new 키워드를 사용하지 못하도록 막는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SingletonService</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonService</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// private 생성자를 통해 new 를 사용한 인스턴스 생성을 막음</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"싱글톤 객체 로직 호출\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>static 영역에 객체 instance를 하나 생성한다.</li>\n<li>이 객체 인스턴스는 오직 getInstance() 메서드를 통해서만 조회할 수 있도록 구현한다. 항상 같은 인스턴스를 반환하도록 만들어야한다.</li>\n<li>딱 1개의 객체 인스턴스만 존재해야 하므로, 생성자를 private로 막아서 new 키워드로 객체 인스턴스가 생성되는 것을 막는다.</li>\n</ol>\n<h2 id=\"싱글톤-패턴의-문제점\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"싱글톤 패턴의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤 패턴의 문제점</h2>\n<p>하지만 하나의 인스턴스만 사용한다는 싱글톤패턴에도 다음과 같은 문제점이 있다. 따라서 안티패턴으로 불린다.</p>\n<ul>\n<li>싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.</li>\n<li>의존관계상 클라이언트가 구체 클래스에 의존한다 -> DIP를 위반한다.</li>\n<li>클라이언트가 구체 클래스에 의존하기 때문에 OCP 원칙을 위반할 가능성이 높다.</li>\n<li>유연성이 떠어진다.</li>\n</ul>\n<h2 id=\"스프링의-싱글톤-컨테이너\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%EC%8B%B1%EA%B8%80%ED%86%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-label=\"스프링의 싱글톤 컨테이너 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링의 싱글톤 컨테이너</h2>\n<p>하지만 스프링컨테이너는 싱글톤 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.</p>\n<p>따라서 스프링 컨테이너는 싱글톤 컨테이너 역할을 한다. 이렇게 싱글톤 객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라고 한다.</p>\n<ul>\n<li>싱글톤 패턴 덕분에 DIP, OCP, private 생성자로부터 자유로워질 수 있다.</li>\n</ul>\n<h2 id=\"싱글톤-방식의-주의점\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"싱글톤 방식의 주의점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤 방식의 주의점</h2>\n<p>싱글톤 패턴은 결국 하나의 객체 인스턴스를 공유하기 때문에, 싱글톤 객체는 상태를 유지(stateful)하게 설계하면 안된다.</p>\n<h3 id=\"stateless-무상태-설계란\" style=\"position:relative;\"><a href=\"#stateless-%EB%AC%B4%EC%83%81%ED%83%9C-%EC%84%A4%EA%B3%84%EB%9E%80\" aria-label=\"stateless 무상태 설계란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stateless (무상태) 설계란</h3>\n<ul>\n<li>특정 클라이언트에 의존적인 필드가 있으면 안된다.</li>\n<li>특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.</li>\n</ul>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h1>\n<ul>\n<li>김영한, Spring 기본편</li>\n</ul>","frontmatter":{"title":"스프링과 싱글톤","date":"August 30, 2022"}}},"pageContext":{"slug":"/Spring/SpringAndSingleton/","previous":{"fields":{"slug":"/PS/BFS/7453/"},"frontmatter":{"title":"백준 7453번 JAVA : 합이 0인 네 정수"}},"next":{"fields":{"slug":"/Spring/IntelliJ/"},"frontmatter":{"title":"IntelliJ"}}}}}