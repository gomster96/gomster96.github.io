{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/BeanLifecycleAndScope/","result":{"data":{"site":{"siteMetadata":{"title":"Gomster","author":"Gomster","siteUrl":"https://gomster96.github.io","comment":{"disqusShortName":"","utterances":"gomster96/gomster96.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"cff6b2f8-e10e-5626-8df3-3e2640bbde91","excerpt":"스프링 빈이란? 를 빈(bean)이라고 한다. IoC(제어의 역전)에서 다루었지만 우리가 직접 new…","html":"<h1 id=\"스프링-빈이란\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%B4%EB%9E%80\" aria-label=\"스프링 빈이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링 빈이란?</h1>\n<p><code class=\"language-text\">Spring IoC 컨테이너가 관리하는 자바 객체</code>를 빈(bean)이라고 한다. IoC(제어의 역전)에서 다루었지만 우리가 직접 new를 통해 생성하는 객체가 아닌, <code class=\"language-text\">Spring IoC 컨테이너</code>에 의하여 생성, 관리 되는 자바 객체이다.</p>\n<h1 id=\"스프링-빈의-라이프사이클\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\" aria-label=\"스프링 빈의 라이프사이클 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링 빈의 라이프사이클</h1>\n<p>스프링 빈은 간단하게 다음과 같은 라이프 사이클을 가진다.</p>\n<blockquote>\n<p>객체 생성 -> 의존관계 주입</p>\n</blockquote>\n<p>따라서 스프링 빈은 객체를 생성하고, 의존관계 주입이 다 끝난 다음에야 필요한 데이터를 사용할 수 있는 준비가 완료된다. 하지만 <code class=\"language-text\">개발자가 의존관계 주입이 완료 된 시점, 스프링 빈이 소멸되기 직전 시점</code> 등을 알기 위해 해당 시점을 알게해주는 기능을 <code class=\"language-text\">콜백 메서드</code>를 통해 제공한다.</p>\n<h3 id=\"스프링-빈의-이벤트-라이프-사이클\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%9D%BC%EC%9D%B4%ED%94%84-%EC%82%AC%EC%9D%B4%ED%81%B4\" aria-label=\"스프링 빈의 이벤트 라이프 사이클 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링 빈의 이벤트 라이프 사이클</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 스프링 컨테이너 생성\n2. 스프링 빈 생성\n3. 의존관계 주입\n4. 초기화 콜백 : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출\n5. 사용\n6. 소멸전 콜백 : 빈이 소멸되기 직전에 호출\n7. 스프링 종료</code></pre></div>\n<h2 id=\"스프링이-빈-생명주기-콜백을-지원하는-방법\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%B4-%EB%B9%88-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0-%EC%BD%9C%EB%B0%B1%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"스프링이 빈 생명주기 콜백을 지원하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링이 빈 생명주기 콜백을 지원하는 방법</h2>\n<p>3가지 방법을 소개할 것이지만, 결국 맨 마지막에 소개하는 <code class=\"language-text\">@PostConstoructor, @PreDestory</code> 방법을 사용하면 된다.</p>\n<h3 id=\"1-인터페이스initializingbean-disposablebean\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4initializingbean-disposablebean\" aria-label=\"1 인터페이스initializingbean disposablebean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 인터페이스(InitializingBean, DisposableBean)</h3>\n<p>InitializingBean, DisposableBean 두 interface를 implements하면 afterPropertiesSet(), destory() 메서드를 오버라이드해서 사용할 수 있게 된다.</p>\n<h3 id=\"2-설정-정보-초기화-메서드-종료-메서드-지정\" style=\"position:relative;\"><a href=\"#2-%EC%84%A4%EC%A0%95-%EC%A0%95%EB%B3%B4-%EC%B4%88%EA%B8%B0%ED%99%94-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A2%85%EB%A3%8C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A7%80%EC%A0%95\" aria-label=\"2 설정 정보 초기화 메서드 종료 메서드 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 설정 정보 초기화 메서드, 종료 메서드 지정</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configguration</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LifeCycleConfig</span><span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>initMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"초기화콜백메서드\"</span><span class=\"token punctuation\">,</span> destoryMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"소멸전콜백메서드\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBeanClass</span> <span class=\"token function\">myBeanClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-postconstructor-predestory\" style=\"position:relative;\"><a href=\"#3-postconstructor-predestory\" aria-label=\"3 postconstructor predestory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. @PostConstructor, @PreDestory</h3>\n<p>사용하고 싶은 초기화 콜백 메서드(@PostConstructor)와 소멸 전 콜백 메서드(@PreDestory) 위에 위에 어노테이션을 붙여주면 콜백메서드를 사용할 수 있다.</p>\n<h1 id=\"빈스코프\" style=\"position:relative;\"><a href=\"#%EB%B9%88%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"빈스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빈스코프</h1>\n<p>빈 스코프란 빈이 존재할 수 있는 범위를 뜻한다. 기본적으로 스프링 빈은 싱글톤 스코프로 생성되기 때문에 스프링 컨테이너의 시작과 함께 생성되어서 스프링 컨테이너가 종료될 때까지 유지된다.</p>\n<ul>\n<li>싱글톤 : 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.</li>\n<li>프로토타입 : 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고, 더는 관리하지 않는 매우 짧은 범위의 스코프이다.</li>\n<li>\n<p>웹 관련 스코프</p>\n<ul>\n<li>request : Http 요청 하나가 들어오고 나갈 때 까지 유지되는 스코프, 각각의 HTTP 요청마다 별도의 빈 인스턴스가 생성되고, 관리된다.</li>\n<li>session : HTTP Session과 동일한 생명주기를 가지는 스코프</li>\n<li>application : 서블릿 컨텍스트(ServletContext)와 동일한 생명주기를 가지는 스코프</li>\n<li>websocket : 웹 소켓과 동일한 생명주기를 가지는 스코프</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h1>\n<ul>\n<li>김영한, Spring 기본편</li>\n</ul>","frontmatter":{"title":"스프링 빈 생명주기, 콜백, 스코프","date":"September 05, 2022"}}},"pageContext":{"slug":"/Spring/BeanLifecycleAndScope/","previous":{"fields":{"slug":"/Spring/ComponentScan/"},"frontmatter":{"title":"Component Scan (컴포넌트 스캔)"}},"next":null}}}